<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="~/css/Carrito.css" />


    <div class="carrito-container">
        <h2>Mi Carrito</h2>
        <div id="productos-carrito">
            <!-- Aquí se inyectarán los productos -->
        </div>
        <div class="pagar">
            <button class="btn-pagar" onclick="mostrarResumen()">
                <i class="fas fa-credit-card"></i> Pagar
            </button>
        </div>
    </div>

    <!-- Popup para el resumen del pedido -->
    <div id="popup-resumen" class="popup">
        <div class="popup-contenido">
            <h3>Resumen del Pedido</h3>
            <div id="resumen-productos"></div>
            <p><strong>Total:</strong> <span id="resumen-total">0.00</span></p>
            <p id="precio-descuento"><strong>Total con descuento:</strong> <span id="total-descuento">0.00</span></p>

            <label for="codigo-cupon">Descuento:</label>
            <input type="text" id="codigo-cupon" placeholder="Ingresa tu cupón" class="input-cupon">
            <button class="btn-validar" onclick="validarCupon()">Validar Cupón</button>
            <p id="mensaje-cupon" class="mensaje-cupon"></p>

            <label for="comentarios">Comentarios sobre el pedido:</label>
            <textarea id="comentarios" rows="3" placeholder="Ej. Sin albahaca, extra queso..."></textarea>
            <div class="metodo-pago">
                <button class="btn-pago" onclick="pagarConEfectivo()">
                    <i class="fas fa-cash-register"></i> Efectivo
                </button>
                <button class="btn-pago" onclick="pagarConTarjeta()">
                    <i class="fas fa-credit-card"></i> Tarjeta
                </button>
                <button class="btn-pago" onclick="pagarConPaypal()">
                    <i class="fab fa-paypal"></i> PayPal
                </button>
            </div>
            <button class="btn-cerrar" onclick="cerrarResumen()">Cerrar</button>
        </div>
    </div>

    <script>
        // Función para formatear precios en colones (CRC)
        function formatearPrecio(precio) {
            return new Intl.NumberFormat('es-CR', {
                style: 'currency',
                currency: 'CRC'
            }).format(precio);
        }

        // Función para mostrar el carrito
        function mostrarCarrito() {
            const contenedor = document.getElementById('productos-carrito');
            contenedor.innerHTML = ''; // Limpiar contenido
            let carrito = JSON.parse(localStorage.getItem('carrito')) || [];

            if (carrito.length === 0) {
                contenedor.innerHTML = '<p>El carrito está vacío</p>';
                return;
            }

            carrito.forEach((producto, index) => {
                contenedor.innerHTML += `
                                            <div class="producto">
                                                <div class="info-producto">
                                                    <img src="${producto.imagen}" alt="${producto.nombre}" class="imagen-producto">
                                                    <div class="detalles-producto">
                                                        <h3>${producto.nombre}</h3>
                                                        <p>Precio Unitario: ${formatearPrecio(producto.precio)}</p>
                                                    </div>
                                                </div>
                                                <div class="cantidad">
                                                    <button class="btn-cantidad" onclick="cambiarCantidad(${index}, -1)"><i class="fas fa-minus"></i></button>
                                                    <span id="cantidad-${index}">${producto.cantidad}</span>
                                                    <button class="btn-cantidad" onclick="cambiarCantidad(${index}, 1)"><i class="fas fa-plus"></i></button>
                                                </div>
                                                <div class="precio-total">
                                                    <span>Total: <span id="precio-total-${index}">${formatearPrecio(producto.cantidad * producto.precio)}</span></span>
                                                </div>
                                                <button class="btn-eliminar" onclick="eliminarProducto(${index})"><i class="fas fa-trash"></i> Eliminar</button>
                                            </div>
                                        `;
            });
        }

        // Función para cambiar la cantidad de un producto en el carrito
        function cambiarCantidad(index, cambio) {
            let carrito = JSON.parse(localStorage.getItem('carrito')) || [];
            carrito[index].cantidad = Math.max(1, carrito[index].cantidad + cambio);
            localStorage.setItem('carrito', JSON.stringify(carrito));
            mostrarCarrito();
        }

        // Función para eliminar un producto del carrito
        function eliminarProducto(index) {
            let carrito = JSON.parse(localStorage.getItem('carrito')) || [];
            carrito.splice(index, 1);
            localStorage.setItem('carrito', JSON.stringify(carrito));
            mostrarCarrito();
        }

        // Función para mostrar el resumen del pedido en un popup
        function mostrarResumen() {
            let carrito = JSON.parse(localStorage.getItem('carrito')) || [];
            let resumenProductos = document.getElementById('resumen-productos');
            let total = 0;
            let totalProductos = 0;
            let nombres = [];

            // Limpiar el contenedor
            resumenProductos.innerHTML = '';

            carrito.forEach(producto => {
                const subtotal = producto.cantidad * producto.precio;
                total += subtotal;
                totalProductos += producto.cantidad;
                nombres.push(producto.nombre);
                resumenProductos.innerHTML += `
                                            <p>${producto.nombre} x ${producto.cantidad} = ${formatearPrecio(subtotal)}</p>
                                        `;
            });

            // Crear un resumen general al inicio
            const resumenGeneral = `
                                        <p><strong>Total de productos:</strong> ${totalProductos}</p>
                                        <p><strong>Productos:</strong> ${nombres.join(", ")}</p>
                                    `;

            // Insertar el resumen general antes del detalle de cada producto
            resumenProductos.insertAdjacentHTML('afterbegin', resumenGeneral);

            document.getElementById('resumen-total').innerText = formatearPrecio(total);
            document.getElementById('popup-resumen').style.display = 'flex';
            document.getElementById('precio-descuento').style.display = 'none';
            document.getElementById('mensaje-cupon').style.display = 'none';
            document.getElementById('codigo-cupon').value = '';
            cuponAplicado = null;
        }

        // Función para cerrar el resumen del pedido
        function cerrarResumen() {
            document.getElementById('popup-resumen').style.display = 'none';
        }

    const usuarioId = parseInt('@ViewBag.UsuarioId');


        let cuponAplicado = null;

        async function validarCupon() {
            let codigo = document.getElementById('codigo-cupon').value;
            let mensajeCupon = document.getElementById('mensaje-cupon');
            mensajeCupon.style.display = 'block';

            if (!codigo) {
                mensajeCupon.textContent = "Por favor, ingresa un código de cupón.";
                mensajeCupon.style.color = "red";
                return;
            }

            try {
                let response = await fetch(`/api/CuponService/ValidarCupon?usuarioId=${usuarioId}&codigo=${codigo}`);
                let data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || "Error al validar cupón");
                }
                document.getElementById('precio-descuento').style.display = 'block';
                let totalTexto = document.getElementById('resumen-total').innerText;
                let totalNumerico = parseFloat(totalTexto.replace(/[^\d,.-]/g, '').replace(',', '.'));
                let descuento = totalNumerico * (data.cupon.descuento / 100);
                document.getElementById('total-descuento').innerText = formatearPrecio(totalNumerico - descuento);
                cuponAplicado = data.cupon;
                mensajeCupon.textContent = "Cupón válido: " + cuponAplicado.codigo;
                mensajeCupon.style.color = "green";
            } catch (error) {
                mensajeCupon.textContent = error.message;
                mensajeCupon.style.color = "red";
                cuponAplicado = null;
            }
        }

        async function procesarPago(metodoPago) {
            let carrito = JSON.parse(localStorage.getItem('carrito')) || [];
            let comentarios = document.getElementById('comentarios').value;
            let total = carrito.reduce((sum, producto) => sum + (producto.cantidad * producto.precio), 0);

            if (carrito.length === 0) {
                alert("El carrito está vacío.");
                return false;
            }

            let pedido = {
                Id: 0,
                UsuarioId: usuarioId,
                FechaPedido: new Date().toISOString().slice(0, 19),
                EstadoPedido: "Pendiente",
                MetodoPago: metodoPago,
                Total: total,
                Comentarios: comentarios,
                CuponId: cuponAplicado ? cuponAplicado.id : null,
                Cupon: cuponAplicado || null,
                Detalles: carrito.map(producto => ({
                    Id: 0,
                    PedidoId: 0,
                    ProductoId: parseInt(producto.id),
                    Cantidad: producto.cantidad,
                    PrecioUnitario: producto.precio,
                    Total: producto.cantidad * producto.precio,
                }))
            };

            try {
                let response = await fetch("/api/PedidosService/", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(pedido)
                });

                const responseBody = await response.text();

                if (!response.ok) {
                    throw new Error(`Error al realizar el pedido. Respuesta del servidor: ${responseBody}`);
                }

                return true;
            } catch (error) {
                console.error("Error:", error);
                alert("Hubo un problema al realizar el pedido: " + error.message);
                return false;
            }
        }

        async function pagarConEfectivo() {
            const exito = await procesarPago("Efectivo");
            if (exito) {
                alert("Pedido realizado con éxito. Puedes pagar en efectivo.");
                localStorage.removeItem("carrito");
                mostrarCarrito();
                cerrarResumen();
            }
        }

        async function pagarConTarjeta() {
            const datosTarjeta = prompt("Introduce los datos de tu tarjeta (número, fecha exp., CVV):");

            if (!datosTarjeta || datosTarjeta.trim() === "") {
                alert("Debes introducir los datos de la tarjeta para continuar.");
                return;
            }

            const exito = await procesarPago("Tarjeta de Crédito");
            if (exito) {
                alert("Pago con tarjeta procesado con éxito.");
                localStorage.removeItem("carrito");
                mostrarCarrito();
                cerrarResumen();
            }
        }

        async function pagarConPaypal() {
            // Simulación de redirección a PayPal
            const confirmacion = confirm("Serás redirigido a PayPal para completar el pago. ¿Continuar?");

            if (!confirmacion) return;

            const exito = await procesarPago("PayPal");
            if (exito) {
                alert("Pago con PayPal procesado con éxito.");
                localStorage.removeItem("carrito");
                mostrarCarrito();
                cerrarResumen();

            }
        }

        // Cargar el carrito cuando se cargue la página
        document.addEventListener("DOMContentLoaded", mostrarCarrito);
    </script>
