@model List<JarredsOrderHub.Models.Pedidos>

@{
    ViewBag.Title = "Listado de Pedidos";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<style>
    /* Contenedor general de pedidos */
    .container-detalle-pedido {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        gap: 20px;
        padding: 20px;
    }


    .order-history-description {
        text-align: center;
        color: var(--dark-color);
        font-size: 1.2rem;
        margin-bottom: 30px;
    }

    /* Tarjeta resumen de pedido (card) */
    .card-pedido {
        background-color: #ffffff;
        border: 1px solid #ccc;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        width: 320px;
        padding: 15px;
        cursor: pointer;
        transition: transform 0.2s;
    }
    .card-pedido:hover {
        transform: scale(1.02);
    }
    .card-pedido h3 {
        margin: 0;
        /* Se utiliza amarillo y se agrega '#' al número de pedido */
        color: #F2A413;
        font-family: 'Lobster', cursive;
    }
    .card-pedido p {
        font-size: 14px;
        margin: 5px 0;
        color: #333;
    }
    .bold-text {
        font-weight: bold;
    }
    .card-pedido i {
        color: #2EA629;
    }
    /* Agregamos la línea para Envío Express y Total del Pedido */
    .info-total {
        font-size: 14px;
        margin: 5px 0;
        color: #333;
    }
    /* Modal para detalle del pedido */
    .modal-pedido {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.5);
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.3s;
    }

    .modal-pedido-content {
        background-color: #262626; /* Fondo oscuro */
        margin: 5% auto;
        padding: 20px;
        border-radius: 10px;
        width: 90%;
        max-width: 800px;
        box-shadow: 0 3px 10px rgba(0,0,0,0.2);
        max-height: 90vh; /* Permite scroll si el contenido es alto */
        overflow-y: auto;
    }
    .modal-pedido-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #F2A413;
        padding-bottom: 10px;
        margin-bottom: 15px;
    }
    .modal-pedido-header h2 {
        margin: 0;
        color: #F2A413;
    }
    .modal-pedido-close {
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        color: #F2A413;
    }
    .detalle-pedido-info p {
        font-size: 14px;
        margin: 8px 0;
        color: #FFFFFF;
    }
    .detalle-pedido-info span.bold-text {
        font-weight: bold;
        color: #F2A413;
    }
    /* Estilo de platos en el detalle */
    .detalle-pedido-info p span.subtitulo {
        color: #ff4c4c; /* Se usa rojo para acentos */
    }
    /* Sección de repartidores */
    .repartidor-lista {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 15px;
    }
    .card-repartidor {
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 10px;
        width: 150px;
        text-align: center;
        cursor: pointer;
        transition: transform 0.2s;
    }
    .card-repartidor:hover {
        transform: scale(1.05);
    }
    .card-repartidor p {
        margin: 5px 0;
        font-size: 14px;
        color: #262626;
    }
    /* Sección para cambiar el estado del pedido */
    .container-asignar-estados {
        margin-top: 20px;
        border-top: 1px solid #ccc;
        padding-top: 15px;
    }
    .container-asignar-estados h3 {
        margin-bottom: 10px;
        color: #F2A413;
    }
    .container-asignar-estados select {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%;
        margin-bottom: 10px;
        font-size: 14px;
    }
    .btn-actualizar-estado {
        background-color: #F2A413;
        color: #262626;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        font-size: 14px;
    }
    .btn-actualizar-estado:hover {
        background-color: #ff4c4c;
        color: #ffffff;
    }
    /* Estilo para mostrar repartidor asignado */
    .detalle-repartidor {
        margin-top: 15px;
        padding: 8px;
        border: 2px solid #F2A413;
        font-weight: bold;
        text-align: center;
        color: #F2A413;
    }
</style>

<h1 class="titulo-primario" style="text-align:center; color:#262626; margin:20px 0;">Listado de Pedidos</h1>
<p class="order-history-description">Aquí encontrarás tus pedidos que aún no han sido entregados.</p>

<!-- Contenedor de Cards de Pedidos -->
<div class="container-detalle-pedido">
    @foreach (var pedido in Model.Where(p => !p.EstadoPedido.Equals("Entregado", StringComparison.OrdinalIgnoreCase)))
    {
        <div class="card-pedido" onclick="mostrarDetallesPedido('@pedido.Id')">
            <h3>Pedido #@pedido.Id</h3>
            @if (pedido.Cliente != null)
            {
                <p>
                    <i class="fas fa-user"></i> 
                    <span class="bold-text">Cliente:</span> @pedido.Cliente.Nombre @pedido.Cliente.Apellido
                </p>
                <p>
                    <i class="fas fa-phone"></i>
                    <span class="bold-text">Contacto:</span>
                    @{
                        var contacto = pedido.Cliente.NumeroContacto;
                        string contactoTexto = (contacto != 0 ? contacto.ToString() : "Sin número de contacto");
                    }
                    @contactoTexto
                </p>
                <p>
                    <i class="fas fa-envelope"></i> 
                    <span class="bold-text">Correo:</span> @pedido.Cliente.Email
                </p>
            }
            else
            {
                <p><i class="fas fa-user"></i> Sin información de cliente</p>
            }
            <p>
                <i class="fas fa-comment"></i> 
                <span class="bold-text">Comentarios:</span> @pedido.Comentarios
            </p>
            <p>
                <i class="fas fa-hourglass-half"></i> 
                <span class="bold-text">Estado:</span> @( !string.IsNullOrEmpty(pedido.EstadoPedido) ? pedido.EstadoPedido : "Pendiente")
            </p>
            <!-- Se agrega información de Envío Express y Total del Pedido -->
            <p class="info-total">
                <i class="fas fa-truck"></i> 
                <span class="bold-text">Envío Express:</span> ₡2000
            </p>
            <p class="info-total">
                <i class="fas fa-money-check-alt"></i> 
                <span class="bold-text">Total del Pedido:</span> ₡@( (pedido.Total + 2000).ToString("N2") )
            </p>
        </div>
    }
</div>

<!-- Modal para ver detalle del Pedido, asignar repartidor y actualizar estado -->
<div id="modal-pedido" class="modal-pedido">
    <div class="modal-pedido-content">
        <div class="modal-pedido-header">
            <h2>Detalles del Pedido</h2>
            <span class="modal-pedido-close" onclick="cerrarModalPedido()">&times;</span>
        </div>
        <!-- Detalle del Pedido -->
        <div class="detalle-pedido-info">
            <p><strong>Pedido N°:</strong> <span id="detalle-id"></span></p>
            <p><strong>Fecha:</strong> <span id="detalle-fecha"></span></p>
            <div id="detalle-platos">
                <!-- Listado de platos se renderiza aquí -->
            </div>
            <p><strong>Total:</strong> <span id="detalle-total"></span></p>
            <p><strong>Envío Express:</strong> ₡2000</p>
            <p><strong>Total del Pedido:</strong> <span id="detalle-total-final"></span></p>
            <p><strong>Ubicación de entrega:</strong></p>
            <div id="detalle-mapa" style="height:300px; margin-bottom:15px;"></div>
            <p><strong>Comentarios:</strong> <span id="detalle-comentarios"></span></p>
            <!-- Sección para mostrar repartidor asignado -->
            <div id="detalle-repartidor" class="detalle-repartidor"></div>
        </div>
        <!-- Sección para asignar repartidor mediante tarjetas -->
        <div id="asignar-repartidor" class="container-asignar-estados">
            <h3>Asignar Repartidor</h3>
            <div class="repartidor-lista">
                @if (ViewBag.Repartidores != null && ((List<JarredsOrderHub.Models.Empleado>)ViewBag.Repartidores).Any())
                {
                    foreach (var rep in (List<JarredsOrderHub.Models.Empleado>)ViewBag.Repartidores)
                    {
                        <div class="card-repartidor" onclick="asignarRepartidor(@rep.IdEmpleado)">
                            <i class="fas fa-motorcycle" style="font-size:24px;"></i>
                            <p>@rep.Nombre @rep.Apellido</p>
                        </div>
                    }
                }
                else
                {
                    <p>No hay repartidores disponibles.</p>
                }
            </div>
        </div>
        <!-- Sección para actualizar el estado del pedido -->
        <div class="container-asignar-estados">
            <h3>Cambiar Estado del Pedido</h3>
            <select id="select-estado">
                <option value="Pendiente">Pendiente</option>
                <option value="En preparación">En preparación</option>
                <option value="En camino">En camino</option>
                <option value="Entregado">Entregado</option>
                <option value="Cancelado">Cancelado</option>
            </select>
            <button class="btn-actualizar-estado" onclick="actualizarEstado()">Actualizar Estado</button>
        </div>
    </div>
</div>

<!-- Incluir Leaflet JS -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<!-- Serializar la lista de repartidores a una variable JavaScript -->
<script>
    var repartidores = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Repartidores));
</script>

<script>
    function toast(type, title, msg, ms) {
        if (typeof window.showToast === 'function') {
            window.showToast(type, title, msg, ms);
        } else {
            alert((title ? title + ': ' : '') + (msg || ''));
        }
    }

    var mapaDetalle;

    // Abrir modal y cargar pedido
    function mostrarDetallesPedido(pedidoId) {
        toast('success', 'Cargando', `Abriendo pedido #${pedidoId}...`, 1000);

        fetch(`/api/PedidosService/${pedidoId}`)
            .then(response => {
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                return response.json();
            })
            .then(pedido => {
                document.getElementById("detalle-id").textContent = pedido.id;
                document.getElementById("detalle-fecha").textContent = new Date(pedido.fechaPedido).toLocaleString();
                document.getElementById("detalle-total").textContent = "₡" + pedido.total;
                const totalFinal = parseFloat(pedido.total) + 2000;
                document.getElementById("detalle-total-final").textContent = "₡" + totalFinal.toFixed(2);
                document.getElementById("detalle-comentarios").textContent = pedido.comentarios || "Sin comentarios";

                let platosHtml = "";
                if (pedido.detalles?.length > 0) {
                    pedido.detalles.forEach(detalle => {
                        platosHtml += `<p>
                                <i class="fas fa-utensils"></i>
                                <span class="bold-text">Plato:</span> ${detalle.platillo.nombre} |
                                <span class="bold-text">Cantidad:</span> ${detalle.cantidad} |
                                <span class="bold-text">Subtotal:</span> ₡${detalle.total}
                            </p>`;
                    });
                } else {
                    platosHtml = "<p>No hay platos asociados.</p>";
                }
                document.getElementById("detalle-platos").innerHTML = platosHtml;

                if (pedido.latitudEntrega && pedido.longitudEntrega) {
                    if (mapaDetalle) { mapaDetalle.remove(); }
                    mapaDetalle = L.map('detalle-mapa').setView([pedido.latitudEntrega, pedido.longitudEntrega], 16);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; OpenStreetMap contributors'
                    }).addTo(mapaDetalle);
                    L.marker([pedido.latitudEntrega, pedido.longitudEntrega]).addTo(mapaDetalle).bindPopup("Ubicación de entrega").openPopup();
                    setTimeout(() => mapaDetalle.invalidateSize(), 300);
                } else {
                    document.getElementById("detalle-mapa").innerHTML = "<p>Ubicación no definida.</p>";
                    if (mapaDetalle) { mapaDetalle.remove(); mapaDetalle = null; }
                }

                const detalleRepartidor = document.getElementById("detalle-repartidor");
                if (pedido.idRepartidor) {
                    const rep = repartidores.find(r => r.IdEmpleado === pedido.idRepartidor);
                    detalleRepartidor.textContent = rep
                        ? `Repartidor asignado: ${rep.Nombre} ${rep.Apellido}`
                        : `Repartidor asignado: ${pedido.idRepartidor}`;
                } else {
                    detalleRepartidor.textContent = "Sin repartidor asignado";
                }

                document.getElementById("select-estado").value = pedido.EstadoPedido?.trim() || "Pendiente";
                document.getElementById("modal-pedido").setAttribute("data-pedidoid", pedido.id);
                document.getElementById("modal-pedido").style.display = "flex";

                toast('success', 'Listo', `Pedido #${pedido.id} cargado.`, 1500);
            })
            .catch(error => {
                console.error("Error al obtener el pedido:", error);
                toast('error', 'Error', 'No se pudo cargar el detalle del pedido');
            });
    }

    function cerrarModalPedido() {
        document.getElementById("modal-pedido").style.display = "none";
    }

    // Asignar repartidor
    function asignarRepartidor(idRepartidor) {
        const pedidoId = document.getElementById("modal-pedido").getAttribute("data-pedidoid");
        if (!idRepartidor) {
            toast('error', 'Error', 'No se ha seleccionado un repartidor.');
            return;
        }
        toast('success', 'Asignando', `Asignando repartidor #${idRepartidor}...`, 1000);

        fetch(`/api/PedidosService/AsignarRepartidor/${pedidoId}/${idRepartidor}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
        })
            .then(response => {
                if (response.ok) return response.json();
                throw new Error("Error al asignar repartidor");
            })
            .then(data => {
                toast('success', 'Listo', 'Repartidor asignado correctamente');
                location.reload();
            })
            .catch(error => {
                console.error(error);
                toast('error', 'Error', 'No se pudo asignar el repartidor');
            });
    }

    // Actualizar estado
    function actualizarEstado() {
        const pedidoId = document.getElementById("modal-pedido").getAttribute("data-pedidoid");
        const nuevoEstado = document.getElementById("select-estado").value;
        toast('success', 'Actualizando', `Cambiando estado a ${nuevoEstado}...`, 1000);

        fetch(`/api/PedidosService/actualizarEstado/${pedidoId}/${nuevoEstado}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
        })
            .then(response => {
                if (response.ok) return response.json();
                throw new Error("Error al actualizar el estado");
            })
            .then(data => {
                toast('success', 'Listo', 'Estado actualizado correctamente');
                location.reload();
            })
            .catch(error => {
                console.error(error);
                toast('error', 'Error', 'No se pudo actualizar el estado');
            });
    }
</script>

