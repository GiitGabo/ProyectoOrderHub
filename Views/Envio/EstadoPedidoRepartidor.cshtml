@model List<JarredsOrderHub.Models.Pedidos>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Pedidos Asignados";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />

<h1 class="titulo-primario" style="text-align:center; color:#262626; margin:20px 0;">
    Mis pedidos asignados.
</h1>

<!-- Estilos específicos de la vista -->
<style>
    /* Contenedor principal de tarjetas */
    .container-detalle-pedido {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        background-color: #262626; /* Fondo oscuro */
        /*border: 1px solid #F2A413; /* Borde amarillo */
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    /* Tarjeta para cada pedido */
    .pedido-card {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        overflow: hidden;
        background-color: #262626; /* Fondo oscuro */
        /*border: 1px solid #F2A413; /* Borde amarillo */
        cursor: pointer;
    }

    .pedido-map {
        width: 50%;
        position: relative;
    }

    .pedido-info {
        width: 50%;
        padding: 20px;
    }

        .pedido-info h2 {
            margin-top: 0;
            color: #F2A413;
        }

        .pedido-info p {
            color: #ffffff; /* Texto blanco */
        }

        .pedido-info strong {
            color: #F2A413; /* Amarillo para etiquetas */
        }

    .leaflet-map {
        width: 100%;
        height: 400px;
    }
    /* Modal */
    .modal-pedido {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-pedido-content {
        background-color: #262626; /* Fondo oscuro */
        border: 2px solid #F2A413; /* Borde amarillo */
        margin: 5% auto;
        padding: 20px;
        border-radius: 10px;
        width: 90%;
        max-width: 800px;
    }

    .modal-pedido-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-pedido-close {
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .detalle-pedido-info p {
        font-size: 14px;
        margin: 8px 0;
    }

    .detalle-pedido-info span.bold-text {
        font-weight: bold;
    }
    /* Botones */
    .btn-mostrar-ruta, .btn-google-maps, .btn-actualizar-estado {
        background-color: #2EA629;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 15px;
        display: inline-block;
    }

        .btn-mostrar-ruta:hover, .btn-google-maps:hover, .btn-actualizar-estado:hover {
            background-color: #1F7D1C;
        }
    /* Estilo para repartidor asignado */
    .detalle-repartidor {
        margin-top: 15px;
        padding: 8px;
        border: 2px solid #F2A413; /* Borde amarillo (#F2A413) */
        font-weight: bold;
        text-align: center;
    }
    /* Contenedor para los botones del modal */
    .modal-botones {
        display: flex;
        gap: 10px;
        justify-content: center;
        margin-top: 20px;
        color: #fff
    }

    /* Botones */
    .btn-mostrar-ruta,
    .btn-google-maps,
    .btn-actualizar-estado {
        background-color: #2EA629; /* Verde */
        color: #fff !important; /* Texto oscuro */
    }

    .modal-pedido-header h2 {
        color: #F2A413; /* Amarillo */
    }

    .modal-pedido-close {
        color: #F2A413; /* Amarillo */
    }

    .detalle-pedido-info p {
        color: #ffffff; /* Texto blanco */
    }

    .detalle-pedido-info span.bold-text {
        color: #F2A413; /* Amarillo */
    }

    /* Estado del repartidor */
    .detalle-repartidor {
        border-color: #F2A413; /* Amarillo */
        color: #F2A413; /* Amarillo */
    }

    .pedido-card:hover {
        box-shadow: 0 4px 12px rgba(242, 164, 19, 0.3); /* Sombra amarilla */
    }
</style>

<!-- Serializar la lista de repartidores a una variable JavaScript -->
<script>
    // Asegúrate de que ViewBag.Repartidores contenga la lista de empleados repartidores.
    var repartidores = @Html.Raw(System.Text.Json.JsonSerializer.Serialize((List<JarredsOrderHub.Models.Empleado>)ViewBag.Repartidores));
</script>

<!-- Listado de Pedidos Asignados -->
@if (Model == null || !Model.Any())
{
    <div style="text-align:center; margin:40px 0;">
        <h2>No cuentas con pedidos asignados.</h2>
    </div>
}
else
{
    <div class="container-detalle-pedido">
        @foreach (var pedido in Model)
        {
            <div class="pedido-card" onclick="mostrarDetallesPedido(@pedido.Id)">
                <div class="pedido-map">
                    <div class="leaflet-map" data-lat="@pedido.LatitudEntrega" data-lng="@pedido.LongitudEntrega"></div>
                </div>
                <div class="pedido-info">
                    <h2>Pedido #@pedido.Id</h2>
                    <p><strong>Fecha:</strong> @pedido.FechaPedido.ToString("yyyy-MM-dd HH:mm")</p>
                    <p><strong>Estado:</strong> @pedido.EstadoPedido</p>
                    <p><strong>Método de Pago:</strong> @pedido.MetodoPago</p>
                    <p><strong>Total:</strong> @pedido.Total.ToString("C", new System.Globalization.CultureInfo("es-CR"))</p>
                    @if (pedido.Cliente != null)
                    {
                        <p><strong>Cliente:</strong> @pedido.Cliente.Nombre @pedido.Cliente.Apellido</p>
                        <p><strong>Correo:</strong> @pedido.Cliente.Email</p>
                    }
                    else
                    {
                        <p><strong>Cliente:</strong> Sin información</p>
                    }
                </div>
            </div>
        }
    </div>
}

<!-- Modal para detalles, trazar ruta y actualizar estado -->
<div id="modal-pedido" class="modal-pedido">
    <div class="modal-pedido-content">
        <div class="modal-pedido-header">
            <h2>Detalles del Pedido</h2>
            <span class="modal-pedido-close" onclick="cerrarModalPedido()">&times;</span>
        </div>
        <div class="detalle-pedido-info">
            <p><strong>Pedido N°:</strong> <span id="detalle-id"></span></p>
            <p><strong>Fecha:</strong> <span id="detalle-fecha"></span></p>
            <p><strong>Método de Pago:</strong> <span id="detalle-metodopago"></span></p>
            <p><strong>Total:</strong> <span id="detalle-total"></span></p>
            <p><strong>Comentarios:</strong> <span id="detalle-comentarios"></span></p>
            <div id="detalle-repartidor" class="detalle-repartidor"></div>
        </div>
        <!-- Contenedor del mapa para trazar la ruta -->
        <div id="modal-mapa" style="height:400px; margin:20px 0;"></div>
        <!-- Contenedor de botones para acciones: trazar ruta y mostrar en Google Maps -->
        <div class="modal-botones">
            <button class="btn-mostrar-ruta" onclick="mostrarRuta()">Mostrar Ruta</button>
            <button class="btn-google-maps" onclick="abrirGoogleMaps()">Mostrar en Google Maps</button>
        </div>
        <!-- Botón para actualizar el estado a "Entregado" -->
        <div style="text-align:center; margin-top:20px;">
            <button class="btn-actualizar-estado" onclick="actualizarEstado('Entregado')">Marcar como Entregado</button>
        </div>
    </div>
</div>

<!-- Incluir Leaflet JS y Leaflet Routing Machine JS -->
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

<script>
    // Fallback por si el layout aún no cargó showToast
    function toast(type, title, msg, ms) {
        if (typeof window.showToast === 'function') {
            window.showToast(type, title, msg, ms);
        } else {
            alert((title ? title + ': ' : '') + (msg || ''));
        }
    }

    var mapaDetalle;        // Mapa del modal
    var rutaControl;        // Control de ruta
    window.pedidoActual = null; // Pedido cargado actualmente

    // Inicializar los mapas pequeños en las tarjetas
    document.addEventListener("DOMContentLoaded", function () {
        const maps = document.querySelectorAll('.leaflet-map');
        maps.forEach(mapDiv => {
            const lat = parseFloat(mapDiv.getAttribute('data-lat'));
            const lng = parseFloat(mapDiv.getAttribute('data-lng'));
            if (isNaN(lat) || isNaN(lng)) return;
            var map = L.map(mapDiv).setView([lat, lng], 15);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(map);
            L.marker([lat, lng]).addTo(map).bindPopup("Ubicación de entrega").openPopup();
        });
    });

    // Abrir modal y cargar detalles
    function mostrarDetallesPedido(pedidoId) {
        toast('success', 'Cargando', `Abriendo pedido #${pedidoId}...`, 1200);

        fetch(`/api/PedidosService/${pedidoId}`)
            .then(response => {
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                return response.json();
            })
            .then(pedido => {
                window.pedidoActual = pedido;

                // Rellenar datos
                document.getElementById("detalle-id").textContent = pedido.id;
                document.getElementById("detalle-fecha").textContent = new Date(pedido.fechaPedido).toLocaleString();
                document.getElementById("detalle-total").textContent = "₡" + Number(pedido.total || 0).toLocaleString('es-CR');
                document.getElementById("detalle-comentarios").textContent = pedido.comentarios || '—';
                document.getElementById("detalle-metodopago").textContent = pedido.metodoPago || '—';

                // Repartidor
                const detalleRepartidor = document.getElementById("detalle-repartidor");
                if (pedido.idRepartidor) {
                    const rep = (window.repartidores || []).find(r => parseInt(r.IdEmpleado, 10) === parseInt(pedido.idRepartidor, 10));
                    detalleRepartidor.textContent = rep ? `Repartidor asignado: ${rep.Nombre} ${rep.Apellido}` : `Repartidor asignado: ${pedido.idRepartidor}`;
                } else {
                    detalleRepartidor.textContent = "Sin repartidor asignado";
                }

                // Mapa modal
                if (pedido.latitudEntrega && pedido.longitudEntrega) {
                    if (mapaDetalle) { mapaDetalle.remove(); }
                    mapaDetalle = L.map('modal-mapa').setView([pedido.latitudEntrega, pedido.longitudEntrega], 15);
                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '&copy; OpenStreetMap contributors'
                    }).addTo(mapaDetalle);
                    L.marker([pedido.latitudEntrega, pedido.longitudEntrega]).addTo(mapaDetalle);
                } else {
                    document.getElementById("modal-mapa").innerHTML = "<p>Ubicación no definida.</p>";
                    if (mapaDetalle) { mapaDetalle.remove(); mapaDetalle = null; }
                }

                document.getElementById("modal-pedido").setAttribute("data-pedidoid", pedido.id);
                document.getElementById("modal-pedido").style.display = "block";
                toast('success', 'Listo', `Pedido #${pedido.id} cargado.`, 1500);
            })
            .catch(error => {
                console.error("Error al obtener el pedido:", error);
                toast('error', 'Error', 'No se pudo cargar el detalle del pedido');
            });
    }

    // Cerrar modal
    function cerrarModalPedido() {
        document.getElementById("modal-pedido").style.display = "none";
    }

    // Trazar ruta
    function mostrarRuta() {
        if (!window.pedidoActual) {
            toast('error', 'Sin pedido', 'No hay un pedido cargado.');
            return;
        }
        if (!window.pedidoActual.idRepartidor) {
            toast('error', 'Sin repartidor', 'Este pedido no tiene repartidor asignado.');
            return;
        }
        if (!navigator.geolocation) {
            toast('error', 'Geolocalización', 'Tu navegador no soporta geolocalización.');
            return;
        }

        toast('success', 'Ubicación', 'Obteniendo tu ubicación...', 1200);

        navigator.geolocation.getCurrentPosition(function (pos) {
            trazarRuta(pos.coords.latitude, pos.coords.longitude);
            toast('success', 'Ruta', 'Ruta calculada.', 1500);
        }, function (err) {
            console.error("Geo error:", err);
            toast('error', 'Ubicación', 'No se pudo obtener tu ubicación para trazar la ruta.');
        });
    }

    function trazarRuta(latInicio, lngInicio) {
        if (!mapaDetalle || !window.pedidoActual?.latitudEntrega || !window.pedidoActual?.longitudEntrega) {
            toast('error', 'Mapa', 'No hay mapa o destino para trazar la ruta.');
            return;
        }
        if (rutaControl) {
            mapaDetalle.removeControl(rutaControl);
            rutaControl = null;
        }
        rutaControl = L.Routing.control({
            waypoints: [
                L.latLng(latInicio, lngInicio),
                L.latLng(window.pedidoActual.latitudEntrega, window.pedidoActual.longitudEntrega)
            ],
            routeWhileDragging: false,
            draggableWaypoints: false,
            addWaypoints: false,
            createMarker: (i, wp) => L.marker(wp.latLng)
        }).addTo(mapaDetalle);
    }

    // Google Maps externo
    function abrirGoogleMaps() {
        if (!window.pedidoActual?.latitudEntrega || !window.pedidoActual?.longitudEntrega) {
            toast('error', 'Ubicación', 'No se tiene la ubicación de entrega del pedido.');
            return;
        }
        const url = `https://www.google.com/maps/search/?api=1&query=${window.pedidoActual.latitudEntrega},${window.pedidoActual.longitudEntrega}`;
        window.open(url, "_blank");
        toast('success', 'Google Maps', 'Abriendo ruta en una nueva pestaña...', 1500);
    }

    // Actualizar estado -> Entregado
    function actualizarEstado(nuevoEstado) {
        const pedidoId = document.getElementById("modal-pedido").getAttribute("data-pedidoid");
        if (!pedidoId) {
            toast('error', 'Estado', 'No se encontró el ID del pedido.');
            return;
        }
        toast('success', 'Actualizando', `Marcando pedido #${pedidoId} como ${nuevoEstado}...`, 1200);

        fetch(`/api/PedidosService/actualizarEstado/${pedidoId}/${nuevoEstado}`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' }
        })
            .then(response => {
                if (!response.ok) throw new Error("Error al actualizar el estado");
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    toast('success', 'Listo', 'Pedido y pago actualizados correctamente');
                    cerrarModalPedido();
                    // Si prefieres actualizar solo la card, hazlo aquí; por ahora recargamos:
                    location.reload();
                } else {
                    throw new Error(data.message || 'No se pudo actualizar');
                }
            })
            .catch(error => {
                console.error(error);
                toast('error', 'Error', error.message || "Error al actualizar");
            });
    }

    // (Opcional) Actualizar ubicación de repartidor
    function actualizarUbicacionEmpleado() {
        if (!navigator.geolocation) {
            toast('error', 'Geolocalización', 'Tu navegador no soporta geolocalización.');
            return;
        }
        toast('success', 'Ubicación', 'Obteniendo tu ubicación...', 1200);

        navigator.geolocation.getCurrentPosition(function (pos) {
            fetch('/Usuario/ActualizarUbicacion', {
                method: 'POST',
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ latitud: pos.coords.latitude, longitud: pos.coords.longitude })
            })
                .then(r => r.json())
                .then(data => {
                    if (data.success) {
                        toast('success', 'Ubicación', 'Ubicación actualizada correctamente.');
                    } else {
                        toast('error', 'Ubicación', 'Error al actualizar la ubicación.');
                    }
                })
                .catch(err => {
                    console.error("Error en la actualización:", err);
                    toast('error', 'Ubicación', err.message || 'Error al actualizar la ubicación.');
                });
        }, function (err) {
            console.error("Geo error:", err);
            toast('error', 'Ubicación', 'No se pudo obtener tu ubicación.');
        });
    }
</script>