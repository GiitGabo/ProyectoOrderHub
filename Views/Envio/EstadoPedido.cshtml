@model IEnumerable<JarredsOrderHub.Models.Pedidos>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Mis Pedidos";
    // Filtrar pedidos para mostrar únicamente los que no están entregados.
    var pedidosFiltrados = Model?.Where(p => p.EstadoPedido.ToLower() != "entregado");
    // Obtener lista de repartidores desde el ViewBag (cargado en el controlador).
    var repartidores = (IEnumerable<JarredsOrderHub.Models.Empleado>)ViewBag.Repartidores;
}
<link rel="stylesheet" href="~/css/Calificar.css" />
<link rel="stylesheet" href="~/css/Estilos.css" />
<!-- Incluye Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />

<div class="order-history-container">
    <h1 class="order-history-title">Estado de mis Pedidos</h1>
    <p class="order-history-description">Aquí encontrarás tus pedidos que aún no han sido entregados.</p>
    @if (pedidosFiltrados == null || !pedidosFiltrados.Any())
    {
        <div class="order-no-records">
            <p>Aún no existen pagos registrados</p>
        </div>
    }
    else
    {
        <div class="order-slider">
            <div class="order-slider-track">
                @foreach (var pedido in pedidosFiltrados)
                {
                    var repartidor = pedido.IdRepartidor.HasValue 
                        ? repartidores.FirstOrDefault(r => r.IdEmpleado == pedido.IdRepartidor.Value)
                        : null;
                    <div class="order-card">
                        <!-- Columna del Mapa -->
                        <div class="order-card-map">
                            @if (pedido.EstadoPedido.ToLower() != "entregado")
                            {
                                <div class="leaflet-map" data-lat="@pedido.LatitudEntrega" data-lng="@pedido.LongitudEntrega"></div>
                            }
                            else
                            {
                                <div style="display: flex; align-items: center; justify-content: center; height: 100%; font-size: 1rem; color: #999;">
                                    <p>No se puede mostrar la ubicación</p>
                                </div>
                            }
                        </div>
                        <!-- Columna de Información del Pedido -->
                        <div class="order-card-info">
                            <header>
                                <h1 style="font-family: 'Lobster', cursive;">Pedido #@pedido.Id</h1>
                                <p><strong>Fecha:</strong> @pedido.FechaPedido.ToString("yyyy-MM-dd HH:mm")</p>
                                <p><strong>Estado:</strong> @pedido.EstadoPedido</p>
                                <p>
                                    <strong>Repartidor:</strong>
                                    @(repartidor == null ? "Sin repartidor asignado" : repartidor.Nombre + " " + repartidor.Apellido)
                                </p>
                            </header>
                            <div class="order-card-info-body">
                                <p><strong>Método de Pago:</strong> @pedido.MetodoPago</p>
                                <p><strong>Total:</strong> @pedido.Total.ToString("C", new System.Globalization.CultureInfo("es-CR"))</p>
                                <h3>Detalles del Pedido</h3>
                                <ul class="order-details-list">
                                    @if (pedido.Detalles != null && pedido.Detalles.Any())
                                    {
                                        foreach (var detalle in pedido.Detalles)
                                        {
                                            <li>
                                                <span><strong>Plato:</strong> @(detalle.Platillo?.Nombre ?? "Sin nombre")</span> |
                                                <span><strong>Cantidad:</strong> @detalle.Cantidad</span> |
                                                <span><strong>Precio:</strong> @detalle.Total.ToString("C", new System.Globalization.CultureInfo("es-CR"))</span>
                                            </li>
                                        }
                                    }
                                    else
                                    {
                                        <li>No hay detalles disponibles.</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        @if (pedidosFiltrados.Count() > 1)
        {
            <div class="order-navigation">
                <button class="order-btn-nav" id="orderPrevBtn">&laquo; Anterior</button>
                <button class="order-btn-nav" id="orderNextBtn">Siguiente &raquo;</button>
            </div>
        }
    }
</div>

<!-- Incluir Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Inicialización de los mapas en cada tarjeta
        const mapDivs = document.querySelectorAll('.leaflet-map');
        mapDivs.forEach(function (mapDiv) {
            const lat = parseFloat(mapDiv.getAttribute('data-lat'));
            const lng = parseFloat(mapDiv.getAttribute('data-lng'));
            if (isNaN(lat) || isNaN(lng)) return;
            let map = L.map(mapDiv).setView([lat, lng], 15);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
            L.marker([lat, lng]).addTo(map)
                .bindPopup("Ubicación de entrega")
                .openPopup();
        });

        // Slider de pedidos
        const sliderTrack = document.querySelector('.order-slider-track');
        const orders = document.querySelectorAll('.order-card');
        let currentIndex = 0;
        function updateSlider() {
            const offset = -currentIndex * (orders[0].clientWidth + 20);
            sliderTrack.style.transform = `translateX(${offset}px)`;
        }
        document.getElementById('orderPrevBtn')?.addEventListener('click', function () {
            if (currentIndex > 0) {
                currentIndex--;
                updateSlider();
            }
        });
        document.getElementById('orderNextBtn')?.addEventListener('click', function () {
            if (currentIndex < orders.length - 1) {
                currentIndex++;
                updateSlider();
            }
        });
        window.addEventListener('resize', updateSlider);
        updateSlider();
    });
</script>
